#Ethernet
export ENETDIR=$(TOPDIR)/linux/drivers/ethernet

#WLAN Driver
export HAL=$(TOPDIR)/drivers/wlan/hal/linux
export ATH_TOOL_DIR=$(TOPDIR)/drivers/wlan/os/linux/tools/
export ATH_DFS=$(TOPDIR)/drivers/wlan/lmac/dfs
export ATHEROSPATH=$(TOPDIR)/drivers/wlan
export ATH_DRV=$(TOPDIR)/drivers/wlan/os/linux

#BOOTLOADER
export BOOTLOADERDIR=$(TOPDIR)/boot/u-boot

#USB
export USBMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/usb
export USBDIR=${KERNELPATH}/drivers/usb

# OFFLOAD
export OFFLOAD_STACK=$(TOPDIR)/offload_stack
export ROM_BOOT_DRV=$(TOPDIR)/boot/rom-boot-drv
export FWU_UTIL=$(TOPDIR)/boot/utility
export BUSYBOX_CFG=$(TOPDIR)/apps/$(BUSYBOX)
export TOOLCHAIN_CFG=$(TOPDIR)/build/$(TOOLCHAIN)
export TOOLCHAIN_UCLIBC_CFG=$(TOPDIR)/build/$(TOOLCHAIN)/toolchain/uClibc
export KERNEL_CFG=$(TOPDIR)/linux/kernels/$(KERNEL)/arch/mips/configs

#Package
PKG_DIR        ?= $(TOPDIR)/pkg
PKG_SDK_INC    ?= $(TOPDIR)/build/scripts/$(BOARD_TYPE)/SDK.include
PKG_SDK_EXC    ?= $(TOPDIR)/build/scripts/$(BOARD_TYPE)/SDK.exclude
PKG_WLAN_INC   ?= $(TOPDIR)/build/scripts/$(BOARD_TYPE)/WLAN.include
PKG_WLAN_EXC   ?= $(TOPDIR)/build/scripts/$(BOARD_TYPE)/WLAN.exclude

HIF         = gmac
WLAN_NAME   ?= wlan-sdk
SDK_NAME    ?= bsp-sdk

# Board specific config file sffix
CFG_SFX=_cfg

BOARD_NAME=$(BOARD_TYPE)$(BUILD_CONFIG)

# 'mksingle' command for use with 'vmlrd_lzma' target
ifeq ($(strip  $(BUILD_CONFIG)),)
SINGLECMD=$(TOPDIR)/build/util/mksingle -2 db12x-offload-gmac-ramdisk.lzma
else
ifeq ($(strip $(BUILD_EXT)),)
SINGLECMD=$(TOPDIR)/build/util/mksingle -b $(BUILD_CONFIG) -2 db12x-offload-gmac-ramdisk.lzma
else
SINGLECMD=$(TOPDIR)/build/util/mksingle -b $(BUILD_CONFIG)$(BUILD_EXT) -2 db12x-offload-gmac-ramdisk.lzma
endif
endif

define cleanup_files
endef

#
# Makefile for WASP Fusion build.  It has dependancies for both
# the "common" build and the "jffs2" build.  This is unique for
# each board type, and must be configured for each board.
#

# To enable library optimization (removing unused object code from
# shared libraries) set BUILD_LIBRARYOPT to 'y' else 'n'
BUILD_LIBRARYOPT := n

target_list :=

ifneq ($(shell cat ./.last_build),$(BOARD_TYPE))
target_list += kernel_clean
endif

target_list += 	config_fix check_tftp rootfs_prep toolchain_build \
				kernel_build kernel_info lzma_uimage enet_build busybox_build \
				driver_build offload_build stage1fw vmlrd_lzma
            

default: $(target_list)
$(BOARD_TYPE)_clean: driver_clean offload_clean

config_fix:
	echo $(BOARD_TYPE)>./.last_build    &&  \
	cp -f $(TOOLCHAIN_UCLIBC_CFG)/$(PARENT_BOARD).config \
	$(TOOLCHAIN_UCLIBC_CFG)/$(BOARD_NAME).config
	
	cp -f $(TOOLCHAIN_CFG)/$(PARENT_BOARD).config \
	$(TOOLCHAIN_CFG)/$(BOARD_NAME).config
	chmod +w $(TOOLCHAIN_CFG)/$(BOARD_NAME).config
	-cat $(TOOLCHAIN_CFG)/$(BOARD_NAME)$(CFG_SFX) >> \
	$(TOOLCHAIN_CFG)/$(BOARD_NAME).config
	
	cp -f $(BUSYBOX_CFG)/defconfig-$(PARENT_BOARD) \
	$(BUSYBOX_CFG)/defconfig-$(BOARD_NAME)
	chmod +w $(BUSYBOX_CFG)/defconfig-$(BOARD_NAME)
	-cat $(BUSYBOX_CFG)/$(BOARD_NAME)$(CFG_SFX) >> \
	$(BUSYBOX_CFG)/defconfig-$(BOARD_NAME)
	
	cp -f $(KERNEL_CFG)/$(PARENT_BOARD)_defconfig \
	$(KERNEL_CFG)/$(BOARD_NAME)_defconfig
	chmod +w $(KERNEL_CFG)/$(BOARD_NAME)_defconfig
	-cat $(KERNEL_CFG)/$(BOARD_NAME)$(CFG_SFX) >> \
	$(KERNEL_CFG)/$(BOARD_NAME)_defconfig


#
# Unique rules for the ag7240 PHY with the wasp   board
#

enet_build:
	cd $(ENETDIR) && rm -f *.o *.ko *.mod.* && make -f Makefile.inc enet_config.h 
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(ENETDIR) modules
	test -d $(MODULEPATH) || mkdir -p $(MODULEPATH)
	cp $(ENETDIR)/athrs_gmac.ko $(MODULEPATH)

WIRELESSTOOLNAMES := athstats athstatsclear 80211stats athkey athchans athctrl\
	athdebug 80211debug wlanconfig athcwm athampdutrc atrc \
	pktlogconf pktlogdump radartool cgiMain

wireless_tools_clean:
	if test -n "$(WIRELESSTOOLS)"; then \
	cd ../apps/$(WIRELESSTOOLS); make clean; \
	fi

wireless_tools_main:
	@echo making wireless_tools 
	if test -n "$(WIRELESSTOOLS)"; then \
	cd ../apps/$(WIRELESSTOOLS); make clean; make; \
	cp -f $(WIRELESSTOOLSLIB) $(INSTALL_ROOT)/lib; \
	cp -f iwpriv $(INSTALL_ROOT)/sbin; \
	cp -f iwconfig $(INSTALL_ROOT)/sbin; \
	cp -f iwlist $(INSTALL_ROOT)/sbin; \
	cd $(TOPDIR)/drivers/wlan/os/linux/tools && make clean; \
	make wlanconfig BUILD_STATIC=$(BUILD_STATIC); \
	cp -f wlanconfig $(INSTALL_ROOT)/sbin; \
	fi

ath_tools: ath_tools_clean
	@echo makeing ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools;

ath_tools_clean:
	@echo cleaning ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools_clean;

main_hal_clean:
	@echo clean HAL
	cd $(HAL) && make TARGET=$(TARGETARCH) clean; 
	-find $(HAL) -type f -name "*.o" -exec rm -vf {} ';';
	-find $(HAL) -type f -name ".*.cmd" -exec rm -vrf {} ';';
	-find $(HAL) -type f -name "modules.order" -exec rm -vrf {} ';';
	-find $(HAL) -type d -name ".tmp_versions" -exec rm -vff {} ';';

main_hal_build: 
	@echo making hal
	if test -n "$(TARGETARCH)"; then \
	cd $(HAL) && make TARGET=$(TARGETARCH) clean &&  \
	make TARGET=$(TARGETARCH) && make TARGET=$(TARGETARCH) release; \
	fi

driver_clean: main_hal_clean wireless_tools_clean ath_tools_clean
	@echo cleaning wlan
	cd $(ATH_DRV) && \
	$(MAKEARCH) TARGET=$(TARGETARCH) clean;
	-find $(ATH_DRV) -type f -name "*.o" -exec rm -vf {} ';'; 
	-find $(ATH_DRV) -type f -name ".*.cmd" -exec rm -vf {} ';';
	-find $(ATH_DRV) -type f -name "modules.order" -exec rm -vrf {} ';';
	-find $(ATH_DRV) -type d -name ".tmp_versions" -exec rm -vrf {} ';';

driver_build: main_hal_build wireless_tools_main ath_tools
	@echo making wlan
	cd $(TOPDIR)/drivers/wlan/os/linux && \
	$(MAKEARCH) TARGET=$(TARGETARCH) clean \
	&& $(MAKEARCH) TARGET=$(TARGETARCH) && \
	$(MAKEARCH) DESTDIR=$(INSTALLROOT) TARGET=$(TARGETARCH) install
	$(MAKE) $(BUILD_TYPE)_build
	find $(INSTALL_ROOT) -type f -name "ath_pktlog.ko" -exec rm -vf {} ';'; 

usb_build: 
	test -d $(USBMODPATH) || mkdir -p $(USBMODPATH)
#	cp -f $(USBDIR)/core/usbcore.ko ${USBMODPATH}
#	cp -f ${USBDIR}/host/ehci-hcd.ko ${USBMODPATH}
#	cp -f ${USBDIR}/storage/usb-storage.ko ${USBMODPATH}
#	cp -f ${USBDIR}/gadget/g_ether.ko ${USBMODPATH}
#	cp -f ${USBDIR}/gadget/ar9130_udc.ko ${USBMODPATH}
	cp -f ${USBDIR}/gadget/ath_udc.ko ${USBMODPATH}

lzma_build:
	@echo making lzma.....
	cd $(TOPDIR)/apps/lzma457/CPP/7zip/Compress/LZMA_Alone && \
	make -f makefile.gcc clean && \
	make -f makefile.gcc  && \
	echo copying lzma... && \
	cp -f lzma	$(TOPDIR)/build/util

uboot_tools:
	@echo Making uboot tools...
	cd $(BOOTLOADERDIR) && $(MAKEARCH) mrproper
	cd $(BOOTLOADERDIR) && make db12x_config
	cd $(BOOTLOADERDIR) && make tools

lzma_uimage: lzma_build uboot_tools
	@echo "Generating LZMA'ed kernel....."
	cd $(KERNELPATH)/arch/$(KERNELARCH)/boot && \
	$(TOPDIR)/build/util/lzma e $(KERNELTARGET) $(KERNELTARGET).lzma && \
	cp $(KERNELTARGET).lzma $(TFTPPATH)/$(KTFILE).lzma && \
	cp $(KERNELTARGET).lzma $(IMAGEPATH)/$(KTFILE).lzma;
	echo Making uImage...
	cd util && mkuImage.sh $(UBOOTDIR)/tools $(KERNELPATH) $(BUILD_CONFIG) lzma


##################################################################
############### Offload Dev Build Framework ######################
##################################################################

fwu_util:
	cd $(FWU_UTIL)	&&	\
	make clean &&	\
	make

stage1fw: fwu_util
	@echo "Building the Stage 1 Firmware"
	cd $(ROM_BOOT_DRV) && \
    make clean && \
	make all && \
	cp fwu_rombootdrv.c $(IMAGEPATH) 

vmlrd: ram_build
	cd $(IMAGEPATH) && $(TOPDIR)/build/util/mksingle && \
	cp -f $(IMAGEPATH)/vmlrd.c $(OFFLOAD_STACK)/driver/host/fw_loader/$(HIF) && \
	cp -f $(IMAGEPATH)/fwu_rombootdrv.c \
	$(OFFLOAD_STACK)/driver/host/fw_loader/$(HIF) 

vmlrd_lzma: ram_lzma_build $(TOPDIR)/boot/utility/bin/bin2hex
	cd $(IMAGEPATH) && $(SINGLECMD) && \
	cp -f $(IMAGEPATH)/vmlrd.bin $(TOPDIR)/boot/wasp-simple-lzma && \
	cp -f $(IMAGEPATH)/$(INFOFILE) $(TOPDIR)/boot/wasp-simple-lzma/vmlinux.info && \
	cd $(TOPDIR)/boot/wasp-simple-lzma && make && cp vmlrd_lzma.c $(IMAGEPATH) && \
	cp -f $(IMAGEPATH)/vmlrd_lzma.c $(OFFLOAD_STACK)/driver/host/fw_loader/$(HIF) && \
	cp -f $(IMAGEPATH)/fwu_rombootdrv.c $(OFFLOAD_STACK)/driver/host/fw_loader/$(HIF) 

ram_lzma_build: image_root
	@echo Making ramfs at `date`
	cd util && \
        genext2fs -b 8192 -i 512 -D ../scripts/$(BOARD_TYPE)/dev.txt -d $(IMAGE_ROOT) $(BOARD_TYPE)-ramdisk
	cd util && lzma e $(BOARD_TYPE)-ramdisk -so > $(BOARD_TYPE)-ramdisk.lzma
	cd util && cp $(BOARD_TYPE)-ramdisk.lzma $(IMAGEPATH)
	@echo Done Making ramfs at `date`

$(TOPDIR)/boot/utility/bin/bin2hex:
	@echo $@
	@cd $(TOPDIR)/boot/utility/bin2hex; make

offload_build:
	@echo "Building the Offload host ..."
	cd $(OFFLOAD_STACK)/driver/target/linux/build/wasp   &&	\
	$(MAKEARCH) TARGET=$(TARGETARCH) BUS=$(HIF) && \
	$(MAKEARCH) DESTDIR=$(INSTALL_ROOT) TARGET=$(TARGETARCH) BUS=$(HIF) install
	cd $(OFFLOAD_STACK)/wsupp_bridge/linux && \
	$(MAKEARCH) CC=$(TOOLPREFIX)gcc DESTDIR=$(INSTALL_ROOT) tgt_install
    
offload_clean:
	@echo "Cleaning the Offload target ..."
	cd $(OFFLOAD_STACK)/driver/target/linux/build/wasp  &&	\
	$(MAKEARCH) TARGET=$(TARGETARCH) BUS=$(HIF) clean 

##################################################################
################### Package SDK Framework ########################
##################################################################

pkg_sdk: clean
	mkdir -p $(PKG_DIR)
	cd $(TOPDIR) &&	\
	tar -czvf $(PKG_DIR)/$(SDK_NAME).tgz -T $(PKG_SDK_INC) -X $(PKG_SDK_EXC)


pkg_wlan: $(BOARD_TYPE)_clean
	mkdir -p $(PKG_DIR)
	cd $(TOPDIR) &&	\
	tar -czvf $(PKG_DIR)/$(WLAN_NAME).tgz -T $(PKG_WLAN_INC) -X $(PKG_WLAN_EXC)
