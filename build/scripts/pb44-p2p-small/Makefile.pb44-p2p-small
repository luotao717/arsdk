
export HAL=$(TOPDIR)/drivers/wlan/hal
export ENETDIR=$(TOPDIR)/linux/drivers/net/ag7100/
export ATH_TOOL_DIR=$(TOPDIR)/drivers/wlan/os/linux/tools/
export ATH_DFS=$(TOPDIR)/drivers/wlan/lmac/dfs
export ATHEROSPATH=$(TOPDIR)/drivers/wlan

#
# This is the specific makefile for the pb44 board.  It has dependancies for both
# the "common" build and the "jffs2" build.  This is unique for each board type, and
# must be configured for each board.
#

# To enable library optimization (removing unused object code from
# shared libraries) set BUILD_LIBRARYOPT to 'y' else 'n'
BUILD_LIBRARYOPT := y



targetList:= check_tftp rootfs_prep toolchain_build kernel_build kernel_info \
             redboot_mainline enet_build busybox_build sar cgi wpa_supplicant_p2p acfg

ifeq ($(strip ${ATH_SUPPORT_SPECTRAL}),1)
targetList += spectral_app_build
endif

ifeq ($(BUILD_CONFIG), _routing)
targetList += iptables_build
endif

targetList += driver_build $(BUILD_TYPE)_build 

default: ${targetList}


#
# Unique rules for the ag7100 PHY with the ar7100 (Hydra)  board
#

enet_build: kernel_build
	cd $(ENETDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(ENETDIR) modules
	test -d $(MODULEPATH) || mkdir -p $(MODULEPATH)
	cp $(ENETDIR)/ag7100_mod.ko $(MODULEPATH)

wpa_supplicant_p2p:
	cd $(TOPDIR)/apps/; rm -rf hostap-p2p; wget -t3 "http://kamboji.users.atheros.com/gitweb/?p=hostap-p2p.git;a=snapshot;h=HEAD;sf=tgz" -O hostap-p2p.tgz; \
	mkdir hostap-p2p; tar -zxvf hostap-p2p.tgz --strip=1 -C hostap-p2p; \
	cd $(TOPDIR)/apps/hostap-p2p/wpa_supplicant; cp -f $(TOPDIR)/build/scripts/$(BOARD_TYPE)/wpa_supplicant_config .config; \
	if test -d "$(TOPDIR)/apps/hostap-p2p/wpa_supplicant"; then  \
	make clean; \
	make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld; \
	make DESTDIR=$(INSTALL_ROOT)/ BINDIR=sbin install; \
	fi

iptables_build:
	@echo making iptables
	cd ../apps/iptables/iptables-1.3.6 && \
	$(MAKE) clean && \
	$(MAKE) KERNEL_DIR=$(KERNELPATH) && \
	$(TOOLPREFIX)strip iptables && \
	cp iptables $(INSTALL_ROOT)/sbin/iptables 

WIRELESSTOOLNAMES := athstats athstatsclear 80211stats athkey athchans athctrl\
	athdebug 80211debug wlanconfig athcwm athampdutrc atrc \
	pktlogconf pktlogdump radartool dumpregs reg

wireless_tools_main:
	@echo making wireless_tools
	if test -n "$(WIRELESSTOOLS)"; then \
	cd ../apps/$(WIRELESSTOOLS); make clean; make; \
	cp -f $(WIRELESSTOOLSLIB) $(INSTALL_ROOT)/lib; \
	cp -f iwpriv $(INSTALL_ROOT)/sbin; \
	cp -f iwconfig $(INSTALL_ROOT)/sbin; \
	cp -f iwlist $(INSTALL_ROOT)/sbin; \
	cd $(TOPDIR)/drivers/wlan/os/linux/tools && make clean; \
	make wlanconfig BUILD_STATIC=$(BUILD_STATIC); \
	cp -f wlanconfig $(INSTALL_ROOT)/sbin; \
	fi

ath_tools: ath_tools_clean
	@echo making ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools;

ath_tools_clean:
	@echo cleaning ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools_clean;

cgi: ath_tools_clean
	@echo making cgi;\
	cd ../drivers/wlan/os/linux/tools;\
	rm -rf cgiMain;\
	make cgiMain;

acfg: wpa_supplicant_p2p
	@echo making acfg;\
	if test -d "$(TOPDIR)/apps/acfg"; then  \
	cd $(TOPDIR)/apps/acfg;\
	make clean;\
	make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld; \
	make DESTDIR=$(INSTALL_ROOT)/ BINDIR=sbin install; \
	fi
	


art_mod:
	@echo Making ART Module
	cd ../apps/art && make -f makefile.soc.linux.mips clean && \
	make -f makefile.soc.linux.mips hydra
	cp ../apps/art/modules/art.ko $(MODULEPATH)/art.ko

main_hal_build: 
	@echo making FUSION hal
	if test -n "$(TARGETARCH)"; then \
	cd $(HAL)/linux && make TARGET=$(TARGETARCH) clean &&  \
	make TARGET=$(TARGETARCH) && make TARGET=$(TARGETARCH) release; \
	fi

copy_p2p_scripts:
	rm -rf $(INSTALL_ROOT)/etc/ath/p2p
	cp -r $(TOPDIR)/drivers/wlan/os/linux/tools/scripts/p2p $(INSTALL_ROOT)/etc/ath/
	chmod +x $(INSTALL_ROOT)/etc/ath/p2p/*

driver_build: main_hal_build wireless_tools_main ath_tools copy_p2p_scripts
	@echo making umac fusion
	cd $(TOPDIR)/drivers/wlan/os/linux && \
	$(MAKEARCH) TARGET=$(TARGETARCH) clean \
	&& $(MAKEARCH) V=1 TARGET=$(TARGETARCH) && \
	$(MAKEARCH) DESTDIR=$(INSTALLROOT) TARGET=$(TARGETARCH) install
	$(MAKE) $(BUILD_TYPE)_build

redboot_mainline:
	@echo making redboot...
	cd $(BOOTLOADERDIR) && make pb44_rom BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/rom_bld/install/bin/redboot.rom $(IMAGEPATH)
	cd $(BOOTLOADERDIR) && make pb44_ram BOARD_TYPE=pb44
	cp $(BOOTLOADERDIR)/ram_bld/install/bin/redboot.bin $(IMAGEPATH)
	
