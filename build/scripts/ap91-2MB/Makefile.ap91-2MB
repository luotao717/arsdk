export HAL=$(TOPDIR)/drivers/wlan/hal
export ENETDIR=$(TOPDIR)/linux/drivers/net/ag7240/
export ATH_TOOL_DIR=$(TOPDIR)/drivers/wlan/os/linux/tools/
export ATH_DFS=$(TOPDIR)/drivers/wlan/lmac/dfs
export ATHEROSPATH=$(TOPDIR)/drivers/wlan
export PPTPMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/net
export PPTPDIR=${KERNELPATH}/drivers/net/
export NATMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/net
export NATDIR=${KERNELPATH}/net/ipv4/netfilter
export BOOTLOADERDIR=$(TOPDIR)/boot/u-boot
export SQUASHFSLZMADIR=$(TOPDIR)/build/squashfs-lzma
export SQUASHFSFILE=$(BOARD_TYPE)$(BUILD_CONFIG)-squashfs
export TOOLCHAINDIR=$(TOPDIR)/build/$(TOOLCHAIN)
export TOOLCHAINBUILDDIR=$(TOOLCHAINDIR)/toolchain_$(TOOLARCH)
export TOOLCHAINBINDIR=$(TOOLCHAINDIR)/$(TOOLARCH)

#
# Makefile for AP83 Fusion build.  It has dependancies for both
# the "common" build and the "jffs2" build.  This is unique for
# each board type, and must be configured for each board.
#

# To enable library optimization (removing unused object code from
# shared libraries) set BUILD_LIBRARYOPT to 'y' else 'n'
BUILD_LIBRARYOPT := n

ifeq ($(BUILD_CONFIG), _routing)
ap91fus_build: common_fusion iptables_build wlan_driver_build pptp_build \
				nat_build $(BUILD_TYPE)_build
else
ap91fus_build: common_fusion wlan_driver_build $(BUILD_TYPE)_build
endif


ifeq ($(BUILD_WPA2),y) ##################################################
common_fusion: check_tftp rootfs_prep toolchain_build sqlzma_build lzma_uimage \
	kernel_info enet_build busybox_build wpa2 \
	sar cgi art_mod
else ################################################################
common_fusion:	check_tftp rootfs_prep toolchain_build sqlzma_build lzma_uimage \
		kernel_info enet_build busybox_build wsc_fus\
		fus_supplicant sar art_mod
endif

common_build:	check_tftp rootfs_prep toolchain_build uimage \
		kernel_info enet_build busybox_build hostapd wpa_supplicant sar

iptables_build:
	@echo making iptables
	cd $(TOPDIR)/apps/iptables/iptables-1.3.6 && \
	$(MAKE) clean KERNEL_DIR=$(KERNELPATH) && \
	$(MAKE) KERNEL_DIR=$(KERNELPATH) NO_SHARED_LIBS=1 DO_IPV6=0 && \
	cp -f iptables $(INSTALL_ROOT)/sbin/iptables
#	cp extensions/*.so $(INSTALL_ROOT)/lib

#
# Unique rules for the ag7240 PHY with the ar7240 (Python)  board
#

enet_build: kernel_build
	cd $(ENETDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(ENETDIR) modules
	test -d $(MODULEPATH) || mkdir -p $(MODULEPATH)
	cp $(ENETDIR)/ag7240_mod.ko $(MODULEPATH)

eth_diag:
	@echo making Ethernet diagnostic tools;\
	cd ../linux/drivers/net/ag7240/tools/;\
	make install;

wireless_tools_main:
	@echo making wireless_tools 
	if test -n "$(WIRELESSTOOLS)"; then \
	cd $(TOPDIR)/apps/$(WIRELESSTOOLS); make clean; make BUILD_STATIC=y; \
	fi
#ifneq ($(BUILD_CONFIG), _routing) 
#	cd $(TOPDIR)/wlan/linux/tools && \
#	make clean && \
#	make wlanconfig BUILD_STATIC=y && \
#	cp -f wlanconfig $(INSTALL_ROOT)/sbin; \
#	cd $(TOPDIR)/apps/$(WIRELESSTOOLS) && \
#	cp -f iwconfig $(INSTALL_ROOT)/sbin && \
#	cp -f iwlist $(INSTALL_ROOT)/sbin && \
#	cp -f iwpriv $(INSTALL_ROOT)/sbin && \
#	cp -f iwspy $(INSTALL_ROOT)/sbin && \
#	cp -f ifrename $(INSTALL_ROOT)/sbin && \
#	cp -f iwevent $(INSTALL_ROOT)/sbin;
#endif
#	make wlanconfig BUILD_STATIC=$(BUILD_STATIC); \
#	$(STRIP) $(WIRELESSTOOLSLIB); \
#	$(STRIP) iwpriv;  \
#	$(STRIP) iwconfig; \
#	$(STRIP) iwlist; \
#	cp -f $(WIRELESSTOOLSLIB) $(INSTALL_ROOT)/lib; \
#	cp -f iwpriv $(INSTALL_ROOT)/sbin; \
#	cp -f iwconfig $(INSTALL_ROOT)/sbin; \
#	cp -f iwlist $(INSTALL_ROOT)/sbin; \
#	$(STRIP) wlanconfig; \
#	cp -f wlanconfig $(INSTALL_ROOT)/sbin; \

ath_tools_clean:
	@echo cleaning ath tools;\
	cd $(ATH_TOOL_DIR) && \
	make ath_tools_clean;

ath_tools_main: ath_tools_clean 
	@echo makeing ath tools;
	cd $(ATH_TOOL_DIR) && \
	make ath_tools;

cgi: ath_tools_clean
	@echo Making cgi;\
	cd $(ATH_TOOL_DIR) && \
	rm -rf cgiMain && \
	make cgiMain;


#	cd $(TOPDIR)/wlan/linux/tools && make clean \
#	&&  make BUILD_STATIC=$(BUILD_STATIC) &&  $(STRIP) wlanconfig && \
#	cp -f wlanconfig $(INSTALL_ROOT)/sbin && \
#	$(STRIP) athstats athstatsclr athdebug 80211stats 80211debug athkey athampdutrc athcwm atrc pktlogconf pktlogdump radartool && \
#	tar -czvf $(INSTALL_ROOT)/sbin/debug.tgz athstats athstatsclr athdebug 80211stats 80211debug athkey athampdutrc athcwm atrc pktlogconf pktlogdump radartool; \

hostapd_fus: openssl
	if ( test -e ../apps/wpa/hostapd-0.4.8 ) then \
	cd ../apps/wpa/hostapd-0.4.8; cp -f defconfig.fus .config; make clean; make; \
	make PREFIX=$(INSTALL_ROOT)/sbin CONFIG_PATH=$(INSTALL_ROOT)/etc/ath DEFAULT_CFG=$(INSTALL_ROOT)/etc/ath/default install; \
	fi

wsc_fus: hostapd_fus
	if (test -e ../apps/wpa/wsc/src/linux ) then \
	chmod -R 755 ../apps/wpa/wsc/src/lunux; \
	cd ../apps/wpa/wsc/src/linux; make clean; \
	make PREFIX=$(INSTALL_ROOT)/sbin CONFIG_PATH=$(INSTALL_ROOT)/etc/ath DEFAULT_CFG=$(INSTALL_ROOT)/etc/ath/default install; \
	fi

fus_supplicant:
	if (test -e ../apps/wpa/wpa_supplicant-0.5.5 ) then \
	cd ../apps/wpa/wpa_supplicant-0.5.5; cp -f defconfig.fus .config; make clean; \
    make; make PREFIX=$(INSTALL_ROOT)/sbin install; \
	fi

art_mod:
	@echo Making ART Module
	cd ../apps/art && make -f makefile.soc.linux.mips clean && \
	make -f makefile.soc.linux.mips python

hal_build_main:
	@echo making FUSION hal
	if test -n "$(TARGETARCH)"; then \
	cd $(HAL)/linux && make TARGET=$(TARGETARCH) clean &&  \
	make TARGET=$(TARGETARCH) && make TARGET=$(TARGETARCH) release; \
	fi

wlan_driver_build: 	hal_build_main wireless_tools_main ath_tools_main
					@echo making umac fusion
					cd $(TOPDIR)/drivers/wlan/os/linux && \
					$(MAKEARCH) TARGET=$(TARGETARCH) clean \
					&& $(MAKEARCH) TARGET=$(TARGETARCH) && \
					$(MAKEARCH) DESTDIR=$(INSTALLROOT) TARGET=$(TARGETARCH) install
					$(MAKE) $(BUILD_TYPE)_build

usb_build: kernel_build
	test -d $(USBMODPATH) || mkdir -p $(USBMODPATH)
	cp -f $(USBDIR)/core/usbcore.ko ${USBMODPATH}
	cp -f ${USBDIR}/host/ohci-hcd.ko ${USBMODPATH}
	cp -f ${USBDIR}/storage/usb-storage.ko ${USBMODPATH}

pptp_build: kernel_build
	test -d $(PPTPMODPATH) || mkdir -p $(PPTPMODPATH)
	cp -f $(PPTPDIR)/pptp.ko ${PPTPMODPATH}
	cp -f $(PPTPDIR)/pppoe.ko ${PPTPMODPATH}
	cp -f $(PPTPDIR)/pppox.ko ${PPTPMODPATH}
	cp -f $(PPTPDIR)/ppp_generic.ko ${PPTPMODPATH}
	cp -f $(PPTPDIR)/pptp.ko ${PPTPMODPATH}
	cp -f $(PPTPDIR)/slhc.ko ${PPTPMODPATH}

nat_build: kernel_build
	test -d $(NATMODPATH) || mkdir -p $(NATMODPATH)
	cp -f $(NATDIR)/ip_nat_sip.ko ${NATMODPATH}
	cp -f $(NATDIR)/ip_conntrack_sip.ko ${NATMODPATH}

uboot_fusion:
	@echo making uboot...
	cd $(BOOTLOADERDIR) && make ap91_config
	cd $(BOOTLOADERDIR) && make clean && make
	cp $(BOOTLOADERDIR)/u-boot.bin $(IMAGEPATH)

sqlzma_build:
	cd $(SQUASHFSLZMADIR) && \
	$(MAKE)

sqlzma_clean:
	cd $(SQUASHFSLZMADIR) && \
	$(MAKE) clean

lzma_uimage: kernel_build sqlzma_build uboot
	@echo "Generating LZMA'ed kernel....."
	cd $(KERNELPATH)/arch/$(KERNELARCH)/boot && \
	$(TOPDIR)/build/util/lzma e $(KERNELTARGET) $(KERNELTARGET).lzma && \
	cp $(KERNELTARGET).lzma $(TFTPPATH)/$(KTFILE).lzma && \
	cp $(KERNELTARGET).lzma $(IMAGEPATH)/$(KTFILE).lzma;
	echo Making uImage...
	cd util && mkuImage.sh $(UBOOTDIR)/tools $(KERNELPATH) $(BUILD_CONFIG) lzma

# squashfs build
# Unfortunately mksquashfs doesn't natively support lzma compression;
# we have a version of it that does (beneath build directory).
# Also it doesn't create device files from "dev.txt" file as mkjffs2 does;
# we have hacked our version of mksquashfs so that a plain file named
# +{b|c}dev+<major>_<minor>_<name> is turned into the appropriate device
# file on the output.
squashfs_build: sqlzma_build image_root
	@echo BEGIN make squashfs at `date`
	cd $(IMAGE_ROOT) && mkdir -p ./dev -m 715
	cd $(IMAGE_ROOT) && mkdir -p ./sys -m 715
	cd $(IMAGE_ROOT) && ln -s /tmp/mnt ./mnt
	cd $(IMAGE_ROOT) && \
	cat $(TOPDIR)/build/scripts/$(BOARD_TYPE)/dev.txt | \
	sed -e '/^\/dev\//!d' -e 's/.*\///' | \
	awk '{print "./dev/+"$$2"dev+"$$6"_"$$7"_"$$1}' | \
	xargs touch
	rm -f $(IMAGE_ROOT)/sbin/wpa_supplicant
	rm -f $(IMAGE_ROOT)/sbin/iwspy
	rm -f $(IMAGE_ROOT)/sbin/iwevent
	rm -f $(IMAGE_ROOT)/sbin/iwgetid
	rm -f $(IMAGE_ROOT)/sbin/ifrename
	rm -f $(IMAGE_ROOT)/sbin/pktlogconf
	rm -f $(IMAGE_ROOT)/sbin/pktlogdump
	rm -f $(IMAGE_ROOT)/usr/bin/sar
	rm -f $(IMAGE_ROOT)/usr/bin/sadc
	rm -f $(IMAGE_ROOT)/lib/modules/2.6.15/net/ath_pktlog.ko
	echo $(BOARD_TYPE)/`date +%F-%H:%M` >$(IMAGE_ROOT)/version
	$(TOPDIR)/build/util/mksquashfs $(IMAGE_ROOT) $(IMAGEPATH)/$(SQUASHFSFILE) -noappend -be -all-root -devfile-hack -b 65536 -always-use-fragments
###	sudo $(TOPDIR)/build/scripts/$(BOARD_TYPE)/makedev.sh
###	$(TOPDIR)/build/util/mksquashfs $(IMAGE_ROOT) $(IMAGEPATH)/$(SQUASHFSFILE) -noappend -be -all-root
###	sudo chmod 777 $(IMAGEPATH)/$(SQUASHFSFILE)
	chmod 644 $(IMAGEPATH)/$(SQUASHFSFILE)
	cp $(IMAGEPATH)/$(SQUASHFSFILE) $(TFTPPATH)
	@echo END make squashfs at `date`

toolchain_clean:
	@echo BEGIN cleaning toolchain......
	cd $(TOOLCHAINDIR) && \
	rm -rf $(TOOLCHAINBUILDDIR) && \
	rm -rf $(TOOLCHAINBINDIR)
