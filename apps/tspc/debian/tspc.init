#! /bin/sh
### BEGIN INIT INFO
# Provides:          tspc
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     S
# Default-Stop:      0 6
# Short-Description: Script to configure the IPv6 tunnel to tspc
### END INIT INFO

# Author: Kanru Chen <koster@debian.org.tw>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="IPv6 tunnel"
NAME=tspc
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=
SCRIPTNAME=/etc/init.d/$NAME
CONFIG=/etc/tsp/tspc.conf

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
. /lib/lsb/init-functions

# make sure ipv6 module is loaded.
modprobe ipv6 > /dev/null 2>&1

# read tsp client config, to get the interface used
. $CONFIG

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	modprobe tun > /dev/null 2>&1
	if ! cat /proc/misc 2>/dev/null | grep tun > /dev/null
	then
		log_failure_msg "Linux tun/tap subsystem not available" && return 2
	fi
	start-stop-daemon --start --quiet --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --exec $DAEMON
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	ip tunnel del $if_tunnel_v6v4 2>/dev/null
	ip tunnel del $if_tunnel_v6udpv6 2>/dev/null
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
